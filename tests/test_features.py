"""
monobit test suite
feature tests
"""

import os
import io
import unittest

import monobit
from .base import BaseTester


class TestFeatures(BaseTester):
    """Test specific features."""

    def test_render_yaff_bmf_kerning(self):
        webby_mod1, *_ = monobit.load(self.font_path / 'webby-small-kerned.yaff')
        monobit.save(webby_mod1, self.temp_path / 'webby-small-kerned.bmf', where=self.temp_path)
        webby_mod2, *_ = monobit.load(self.temp_path / 'webby-small-kerned.bmf')
        text1 = monobit.render_text(webby_mod1, b'sjifjij')
        text2 = monobit.render_text(webby_mod2, b'sjifjij')
        assert text1 == text2

    verttext="""......................
......................
......@......@........
.......@....@.........
................@.....
...@@@@@@@@@@@@@@@....
..........@...........
....@@@@@@@@@@@@......
..........@...........
..........@......@....
..@@@@@@@@@@@@@@@@@...
..........@...........
..........@.....@.....
..@@@@@@@@@@@@@@@@....
.........@.@..........
........@...@.........
.......@.....@........
.....@@.......@@......
...@@...........@@....
......................
......................
......................
""" * 2

    def test_render_bdf_vertical(self):
        vert2, *_ = monobit.load(self.font_path / 'vertical.bdf')
        text2 = monobit.render_text(vert2, b'\x27\x27', direction='top-to-bottom', paper='.')
        assert text2 == self.verttext.strip()

    def test_render_yaff_vertical(self):
        vert1, *_ = monobit.load(self.font_path / 'vertical.yaff')
        text1 = monobit.render_text(vert1, b'\x27\x27', direction='top-to-bottom', paper='.')
        assert text1 == self.verttext.strip()


if __name__ == '__main__':
    unittest.main()
